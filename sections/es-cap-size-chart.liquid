{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

<style>
  .text-blocks {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    justify-content: center;
    gap: 40px;
  }

  @media screen and (max-width: 750px){
    .text-blocks{
      display: flex;
      flex-direction: column;
      gap: 0px;
    }
  }

  .text-block {
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .text-block__title {
    padding: 26px 0px 20px;
    margin: 0px;
    display: flex;
    width: max-content;
    border-bottom: 1px solid #ee0000;
  }

  .text-block__content p{
    margin: 20px 0px;
  }

  .table-heading{
    margin-bottom: 20px;
    text-align: center;
    font-size: 20px;
    font-weight: 400;
    line-height: 26px;
    word-wrap: break-word;
  }
</style>

<div
  id="{{ section.settings.custom_id }}"
  class="color-{{ section.settings.color_scheme }} gradient{% if section.settings.tab_section %} tab-section{% endif %}{% if section.settings.hide_section %} hidden{% endif %}"
>
  <div class="{% if section.settings.layout == 'row' %}page-width--small{% elsif section.settings.layout == 'section' %} page-width{% elsif section.settings.layout == 'none' %} content-container content-container--full-width{% endif %}">
    <div class="section-{{ section.id }}-padding{% if section.settings.layout == 'section' %} content-container color-{{ section.settings.container_color_scheme }} gradient{% endif %}">
      {%- if section.settings.heading != blank -%}
        <h2 class="es-font-h2 inline-richtext {{ section.settings.heading_size }} {{ section.settings.heading_alignment }}">
          {{ section.settings.heading }}
        </h2>
      {%- else -%}
        <h2 class="visually-hidden">{{ 'accessibility.collapsible_content_title' | t }}</h2>
      {% endif %}

      <div class="font-p">
        {{ section.settings.text }}
      </div>

      <div class="text-blocks">
        {%- for block in section.blocks -%}
          {%- case block.type -%}
            {%- when 'text_blocks' -%}
              {%- if block.settings.block_title or block.settings.block_content -%}
                <div class="text-block">
                  <h3 class="text-block__title">{{ block.settings.block_title }}</h3>
                  <div style="width: 100%; height: 100%; outline: 1px #EE0000 solid; outline-offset: -0.50px"></div>
                  <div class="text-block__content">{{ block.settings.block_content }}</div>
                </div>
              {%- endif -%}
          {%- endcase -%}
        {%- endfor -%}
      </div>

      <div class="size-chart">
        {%- for block in section.blocks -%}
          {%- case block.type -%}
            {%- when 'page' -%}
              <div class="size-chart__item{% if block.settings.responsive == 'desktop' %} small-hide{% elsif block.settings.responsive == 'mobile' %} medium-hide large-up-hide collapsable-item{% endif %}">
                {%- if block.settings.page != blank -%}
                  <div class="size-chart__item-content">
                    {{ block.settings.page.content }}
                  </div>
                {%- endif -%}
              </div>
            {%- when 'image_with_text' -%}
              <div class="size-chart__item size-chart__item--image-with-text">
                {%- if block.settings.image != blank -%}
                  <div class="size-chart__item-content">
                    <div class="size-chart__item-image">
                      {{ block.settings.image | image_url: width: 720 | image_tag: class: 'size-chart__item-image' }}
                    </div>
                    <div class="size-chart__item-text">
                      {{ block.settings.text }}
                    </div>
                  </div>
                {%- endif -%}
              </div>
            {%- when 'metaobject' -%}
              {%- assign title_array = 'Head size in inches,Head size in centimeters,Fitted hat size,Hat size'
                | split: ','
              -%}
              <div class="size-chart__item">
                {%- if block.settings.metaobject_list != blank -%}
                  <div class="size-chart__item-content">
                    <table>
                      <tbody>
                        {%- for title in title_array -%}
                          {%- liquid
                            assign handled_title = title | handleize | replace: '-', '_'
                            assign previous_value = blank
                            if forloop.index == 3
                              assign strong_tag = true
                            else
                              assign strong_tag = false
                            endif
                          -%}
                          <tr>
                            <th>
                              {{ title }}
                            </th>
                            {%- for metaobject in block.settings.metaobject_list -%}
                              {%- unless strong_tag and previous_value == metaobject[handled_title] -%}
                                <td
                                  {% if strong_tag and metaobject[handled_title] != 'XS' %}
                                    colspan="2"
                                  {% endif %}
                                >
                                  {%- if strong_tag -%}
                                    <strong>{{ metaobject[handled_title] }}</strong>
                                  {%- else -%}
                                    {{ metaobject[handled_title] }}
                                  {%- endif -%}
                                </td>
                              {%- endunless -%}
                              {%- assign previous_value = metaobject[handled_title] -%}
                            {%- endfor -%}
                          </tr>
                        {%- endfor -%}
                      </tbody>
                    </table>
                  </div>
                {%- endif -%}
              </div>
          {%- endcase -%}
        {%- endfor -%}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const collapsableItems = document.querySelectorAll('.collapsable-item table');
    collapsableItems.forEach((item) => {
      item.querySelector('caption').addEventListener('click', function () {
        this.classList.toggle('is-active');
      });
    });
  });
</script>

{% schema %}
{
  "name": "ES Size Chart",
  "tag": "section",
  "class": "section es-size-chart",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "header",
      "content": "Tab settings"
    },
    {
      "type": "checkbox",
      "id": "tab_section",
      "label": "Tab Section",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "hide_section",
      "label": "Hide section?",
      "default": false
    },
    {
      "type": "text",
      "id": "custom_id",
      "label": "Custom ID",
      "default": "tabColorList"
    },
    {
      "type": "inline_richtext",
      "id": "heading",
      "label": "t:sections.collapsible_content.settings.heading.label",
      "default": "t:sections.collapsible_content.settings.heading.default"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        },
        {
          "value": "hxl",
          "label": "t:sections.all.heading_size.options__4.label"
        },
        {
          "value": "hxxl",
          "label": "t:sections.all.heading_size.options__5.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    },
    {
      "type": "select",
      "id": "heading_alignment",
      "label": "t:sections.collapsible_content.settings.heading_alignment.label",
      "options": [
        {
          "value": "left",
          "label": "t:sections.collapsible_content.settings.heading_alignment.options__1.label"
        },
        {
          "value": "center",
          "label": "t:sections.collapsible_content.settings.heading_alignment.options__2.label"
        },
        {
          "value": "right",
          "label": "t:sections.collapsible_content.settings.heading_alignment.options__3.label"
        }
      ],
      "default": "center"
    },
    {
      "type": "richtext",
      "id": "text",
      "label": "Text"
    },
    {
      "type": "header",
      "content": "t:sections.collapsible_content.settings.layout_header.content"
    },
    {
      "type": "select",
      "id": "layout",
      "label": "t:sections.collapsible_content.settings.layout.label",
      "options": [
        {
          "value": "none",
          "label": "t:sections.collapsible_content.settings.layout.options__1.label"
        },
        {
          "value": "row",
          "label": "t:sections.collapsible_content.settings.layout.options__2.label"
        },
        {
          "value": "section",
          "label": "t:sections.collapsible_content.settings.layout.options__3.label"
        }
      ],
      "default": "none"
    },
    {
      "type": "color_scheme",
      "id": "container_color_scheme",
      "label": "t:sections.collapsible_content.settings.container_color_scheme.label",
      "default": "scheme-2"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.collapsible_content.settings.section_color_scheme.label",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "page",
      "name": "Page",
      "settings": [
        {
          "type": "page",
          "id": "page",
          "label": "Page"
        },
        {
          "type": "select",
          "id": "responsive",
          "label": "Responsive",
          "options": [
            {
              "value": "desktop",
              "label": "Desktop"
            },
            {
              "value": "mobile",
              "label": "Mobile"
            },
            {
              "value": "both",
              "label": "Both"
            }
          ],
          "default": "both"
        }
      ]
    },
    {
      "type": "image_with_text",
      "name": "Image with text",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Text"
        }
      ]
    },
    {
      "type": "text_blocks",
      "name": "Text Blocks",
      "settings": [
        {
          "type": "text",
          "id": "block_title",
          "label": "Block Title"
        },
        {
          "type": "richtext",
          "id": "block_content",
          "label": "Block Content"
        }
      ]
    },
    {
      "type": "metaobject",
      "name": "Metaobject",
      "settings": [
        {
          "type": "metaobject_list",
          "id": "metaobject_list",
          "label": "Metaobject list",
          "info": "Select the metaobject to display in the size chart.",
          "metaobject_type": "cap_size_chart"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "ES Size Chart"
    }
  ]
}
{% endschema %}
